import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.text.SimpleDateFormat;
import java.time.format.DateTimeFormatter;
import java.time.LocalDateTime;
import java.util.Date;


public class LoginUI {
    private JPasswordField passwordField1;
    private JTextField textField1;
    private JButton button1;
    private JPanel mainPanel;
    private JLabel timeLabel;
	private int inputID;
	private String latestTime;
	JFrame frame;
	
	//Objects
	LoginTracker loginTracker;
	Login log;
	
	
	//Constructor
    public LoginUI() {
		
		//instatiate the objects
		frame = new JFrame("JavaMan Login");
		loginTracker = new LoginTracker();
		log = new Login();
			
        button1.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String inputId = textField1.getText();
				char [] inputPassChar = passwordField1.getPassword();
				boolean isNotNull = false;
				
				//Set inputPass into string
				String inputPass = new String(inputPassChar);
				
				//checks if fields are empty
				if (inputId.trim().length() <=0){
					isNotNull = false;
					JOptionPane.showMessageDialog(null, "Id field cannot be empty", "Null Id field", JOptionPane.ERROR_MESSAGE);
				}
				else if(inputPass.trim().length() <=0){
					isNotNull = false;
					JOptionPane.showMessageDialog(null, "Password field cannot be empty", "Null Pass field", JOptionPane.ERROR_MESSAGE);
				}
				else {
					isNotNull = true;
				}
				
				if (isNotNull == true) {
					System.out.println("Id at method: " + inputId + " " + inputPass);
					//clear the fields
					textField1.setText("");
					passwordField1.setText("");
					CallLogin(inputId,inputPass);
				}
            }
        });

        final SimpleDateFormat timeFormat = new SimpleDateFormat("MMMM/dd/YYYY  HH:mm:ss ");
        ActionListener timerListener = new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                Date date = new Date();
                String time = timeFormat.format(date);
                timeLabel.setText(time);
            }
        };
        Timer timer = new Timer(1000, timerListener);
        // to make sure it doesn't wait one second at the start
        timer.setInitialDelay(0);
        timer.start();
    }
	
	public void CallLogin(String testIdString,String testPass) {

		//Parse String to int (handles exceptions
		try {
			int testId = Integer.parseInt(testIdString);
			//continues execution if no exception
			System.out.println(testId);
			
			int status = log.ConnectAccount(testId, testPass);
			
			/*
				Legend:
				   0 - good
				   1 - Invalid input
				   2 - Already signed in
				   5 - SHA algo error
				   6 - General exception
				   -1 - SQL related error
			*/
			
			switch (status) {
				case 0: 
					//Set valid logged id for reference
					SetLoggedId(log.GetId());

					//Set latest time-in for reference
					SetLatestTime(log.GetLatestTime());

					//call the login tracker
					JOptionPane.showMessageDialog(null,"Successfully signed in!");
					Tracker();
					break;
				case 1:
					JOptionPane.showMessageDialog(null, "Invalid Credentials! Try Again.", "Invalid Credentials", JOptionPane.ERROR_MESSAGE);
					break;
				case 2:
					JOptionPane.showMessageDialog(null, "Account already signed in!", "Error", JOptionPane.ERROR_MESSAGE);
					break;
				case 5:
					JOptionPane.showMessageDialog(null, "Error with hash algo!", "Error", JOptionPane.ERROR_MESSAGE);
					break;
				case 6:
					JOptionPane.showMessageDialog(null, "Some error occured!", "Error", JOptionPane.ERROR_MESSAGE);
					break;
				case -1:
					JOptionPane.showMessageDialog(null, "Error relating to db!", "SQL error", JOptionPane.ERROR_MESSAGE);
					break;
				
			}
						
		}
		catch (NumberFormatException e){
			JOptionPane.showMessageDialog(null, "Id inputted must be numerical only!", "Error", JOptionPane.ERROR_MESSAGE);
		}
	}
	
	public void Tracker() {
		
		loginTracker.IdentifyUser(this.inputID, this.latestTime);
		
		
	}
	
	//mutators
	public void SetLatestTime (String time) {
		this.latestTime = time;
	}
	public void SetLoggedId (int Id) {
		this.inputID = Id;
	}

	
	//getters
	public int GetLoggedId() {return this.inputID;}
	
	public String GetLatestTime() {
		return this.latestTime;
	}
	
    public void LoginHomeUI() throws ClassNotFoundException, UnsupportedLookAndFeelException, InstantiationException, IllegalAccessException {
        UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        frame.setContentPane(new LoginUI().mainPanel);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.pack();
        frame.setSize(300, 200);
        frame.setVisible(true);
		frame.setResizable(false);
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        mainPanel = new JPanel();
        mainPanel.setLayout(new GridBagLayout());
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridBagLayout());
        GridBagConstraints gbc;
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 2;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.BOTH;
        mainPanel.add(panel1, gbc);
        final JLabel label1 = new JLabel();
        label1.setText("User ID   ");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.weighty = 1.0;
        gbc.anchor = GridBagConstraints.WEST;
        panel1.add(label1, gbc);
        textField1 = new JTextField();
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 0;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        panel1.add(textField1, gbc);
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridBagLayout());
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 3;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.BOTH;
        mainPanel.add(panel2, gbc);
        passwordField1 = new JPasswordField();
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 0;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        panel2.add(passwordField1, gbc);
        final JLabel label2 = new JLabel();
        label2.setText("Password ");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.weighty = 1.0;
        gbc.anchor = GridBagConstraints.WEST;
        panel2.add(label2, gbc);
        final JPanel panel3 = new JPanel();
        panel3.setLayout(new GridBagLayout());
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 4;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.BOTH;
        mainPanel.add(panel3, gbc);
        button1 = new JButton();
        button1.setText("Login");
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 0;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        panel3.add(button1, gbc);
        final JPanel panel4 = new JPanel();
        panel4.setLayout(new GridBagLayout());
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 1;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.BOTH;
        mainPanel.add(panel4, gbc);
        timeLabel = new JLabel();
        Font timeLabelFont = this.$$$getFont$$$("Fira Code Medium", -1, -1, timeLabel.getFont());
        if (timeLabelFont != null) timeLabel.setFont(timeLabelFont);
        timeLabel.setText("Clock");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.anchor = GridBagConstraints.WEST;
        panel4.add(timeLabel, gbc);
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        return new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainPanel;
    }

}
